public Map<String, String> mapBully(Map<String, String> map) {
  return !map.containsKey("a") ? map : map.containsKey("b") ? map.entrySet().stream().map(e -> e.getKey().equals("a") ? new AbstractMap.SimpleEntry<String, String>("a", "") : e.getKey().equals("b") ? new AbstractMap.SimpleEntry<String, String>("b", map.get("a")) : e).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue())) : java.util.stream.Stream.concat(map.entrySet().stream().map(e -> e.getKey().equals("a") ? new AbstractMap.SimpleEntry<String, String>("a", "") : e), java.util.stream.Stream.of(new AbstractMap.SimpleEntry<String, String>("b", map.get("a")))).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue()));
}
public Map<String, String> mapShare(Map<String, String> map) {
  return (!map.containsKey("a") ? map.entrySet().stream() : map.containsKey("b") ? map.entrySet().stream().map(e -> e.getKey().equals("b") ? new java.util.AbstractMap.SimpleEntry<String, String>("b", map.get("a")) : e) : java.util.stream.Stream.concat(map.entrySet().stream(), java.util.stream.Stream.of(new java.util.AbstractMap.SimpleEntry<String, String>("b", map.get("a"))))).filter(e -> !e.getKey().equals("c")).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue()));
}
public Map<String, String> mapAB(Map<String, String> map) {
  return !(map.containsKey("a") && map.containsKey("b")) ? map : map.containsKey("ab") ? map.entrySet().stream().map(e -> e.getKey().equals("ab") ? new java.util.AbstractMap.SimpleEntry<String, String>("ab", map.get("a") + map.get("b")) : e).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue())) : java.util.stream.Stream.concat(map.entrySet().stream(), java.util.stream.Stream.of(new java.util.AbstractMap.SimpleEntry<String, String>("ab", map.get("a") + map.get("b")))).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue()));
}
public Map<String, String> topping1(Map<String, String> map) {
  return (map.containsKey("bread") ? map.entrySet().stream().map(e -> e.getKey().equals("bread") ? new java.util.AbstractMap.SimpleEntry<String, String>("bread", "butter") : e) : java.util.stream.Stream.concat(map.entrySet().stream(), java.util.stream.Stream.of(new java.util.AbstractMap.SimpleEntry<String, String>("bread", "butter")))).map(e -> e.getKey().equals("ice cream") ? new java.util.AbstractMap.SimpleEntry<String, String>("ice cream", "cherry") : e).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue()));
}
public Map<String, String> topping2(Map<String, String> map) {
  return (!map.containsKey("ice cream") ? map.entrySet().stream() : map.containsKey("yogurt") ? map.entrySet().stream().map(e -> e.getKey().equals("yogurt") ? new AbstractMap.SimpleEntry<String, String>("yogurt", map.get("ice cream")) : e) : java.util.stream.Stream.concat(map.entrySet().stream(), java.util.stream.Stream.of(new AbstractMap.SimpleEntry<String, String>("yogurt", map.get("ice cream"))))).map(e -> e.getKey().equals("spinach") ? new AbstractMap.SimpleEntry<String, String>("spinach", "nuts") : e).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue()));
}
public Map<String, String> topping3(Map<String, String> map) {
  return !map.containsKey("salad") ? ((!map.containsKey("potato") ? map.entrySet().stream() : map.containsKey("fries") ? map.entrySet().stream().map(e -> e.getKey().equals("fries") ? new AbstractMap.SimpleEntry<String, String>("fries", map.get("potato")) : e) : java.util.stream.Stream.concat(map.entrySet().stream(), java.util.stream.Stream.of(new AbstractMap.SimpleEntry<String, String>("fries", map.get("potato"))))).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue()))) : map.containsKey("spinach") ? (!map.containsKey("potato") ? map.entrySet().stream() : map.containsKey("fries") ? map.entrySet().stream().map(e -> e.getKey().equals("fries") ? new AbstractMap.SimpleEntry<String, String>("fries", map.get("potato")) : e) : java.util.stream.Stream.concat(map.entrySet().stream(), java.util.stream.Stream.of(new AbstractMap.SimpleEntry<String, String>("fries", map.get("potato"))))).map(e -> e.getKey().equals("spinach") ? new AbstractMap.SimpleEntry<String, String>("spinach", map.get("salad")) : e).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue())) : java.util.stream.Stream.concat((!map.containsKey("potato") ? map.entrySet().stream() : map.containsKey("fries") ? map.entrySet().stream().map(e -> e.getKey().equals("fries") ? new AbstractMap.SimpleEntry<String, String>("fries", map.get("potato")) : e) : java.util.stream.Stream.concat(map.entrySet().stream(), java.util.stream.Stream.of(new AbstractMap.SimpleEntry<String, String>("fries", map.get("potato"))))), java.util.stream.Stream.of(new AbstractMap.SimpleEntry<String, String>("spinach", map.get("salad")))).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue()));
}
public Map<String, String> mapAB2(Map<String, String> map) {
  return map.containsKey("a") && map.get("a").equals(map.get("b")) ? map.entrySet().stream().filter(e -> !e.getKey().equals("a") && !e.getKey().equals("b")).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue())) : map;
}
public Map<String, String> mapAB3(Map<String, String> map) {
  return map.containsKey("a") && !map.containsKey("b") ? java.util.stream.Stream.concat(map.entrySet().stream(), java.util.stream.Stream.of(new AbstractMap.SimpleEntry<String, String>("b", map.get("a")))).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue())) : map.containsKey("b") && !map.containsKey("a") ? java.util.stream.Stream.concat(map.entrySet().stream(), java.util.stream.Stream.of(new AbstractMap.SimpleEntry<String, String>("a", map.get("b")))).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue())) : map;
}
public Map<String, String> mapAB4(Map<String, String> map) {
  return map.containsKey("a") && map.containsKey("b") ? (map.get("a").length() == map.get("b").length() ? map.entrySet().stream().map(e -> e.getKey().equals("a") ? new AbstractMap.SimpleEntry<String, String>("a", "") : e.getKey().equals("b") ? new AbstractMap.SimpleEntry<String, String>("b", "") : e) : (map.containsKey("c") ? map.entrySet().stream().map(e -> e.getKey().equals("c") ? new AbstractMap.SimpleEntry<String, String>("c", (map.get("a").length() > map.get("b").length() ? map.get("a") : map.get("b"))) : e) : java.util.stream.Stream.concat(map.entrySet().stream(), java.util.stream.Stream.of(new AbstractMap.SimpleEntry<String, String>("c", (map.get("a").length() > map.get("b").length() ? map.get("a") : map.get("b"))))))).collect(java.util.stream.Collectors.toMap(e -> e.getKey(), e -> e.getValue())) : map;
}
